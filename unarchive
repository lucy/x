#!/usr/bin/env bash
set -e
set -o pipefail

prog="$(basename "$0")"
archives=()
clobber=0
create_dir=0
out_dir=""
prefix=""

usage() {
	cat >&2 <<-EOF
	Usage: $prog [option ...] file [file ...]
	Extracts the content of archives.

	To extract in parallel, use the gnu parallel utility or xargs.

	Options:
	  -h    Show this help
	  -f    Don't try to avoid clobbering files
	  -d    Output directory
	  -c    Create output directory
	EOF
}

exists() { hash "$1" 2>/dev/null; }
err() { printf '%s: %s\n' "$prog" "$1" 1>&2; }
errf() { fmt="$1"; shift; printf "%s: $fmt\n", "$prog" "$@" 1>&2; }

if exists bsdtar; then
	tar=bsdtar
else
	tar=tar
fi

bsdtar_x() { bsdtar "-x${k}vf" "$@"; }
tar_x() { "$tar" "-x${k}vf" "$@"; }

untar() {
	local type
	type="$(file -E -bL --mime-type "$1")"
	if (($?)); then
		err "$type"
		return 1
	fi
	k=k
	if ((clobber)); then
		k=''
	fi
	case "$type" in
	'application/x-tar'|'application/x-bzip2'|'application/x-gzip')
		tar_x "$1" ;;
	'application/x-lrzip')
		if "$tar" --lrzip --help &> /dev/null; then
			bsdtar_x "$1"
		else
			lrzcat "$1" | tar_x -
		fi
		;;
	'application/x-lzip')
		lzip --keep --decompress --stdout "$1" | tar_x - ;;
	'application/x-lzma')
		if "$tar" --lzma --help &> /dev/null; then
			tar_x "$1"
		else
			lzcat "$1" | tar_x -
		fi
		;;
	'application/x-xz')
		if "$tar" --xz --help &> /dev/null; then
			tar_x "$1"
		else
			xzcat "$1" | tar_x -
		fi
		;;
	*)
		# last resort
		bsdtar_x "$1" ;;
	esac
}

extract() {
	local type
	type="$(file -E -bL --mime-type "$1")"
	if (($?)); then
		err "$type"
		return 1
	fi
	case "$type" in
	'application/x-7z-compressed')
		if exists 7za; then
			7za x "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/java-archive'|'application/zip')
		if exists bsdtar; then
			if mkdir "$extract_dir"; then
				bsdtar_x "$1" -C "$extract_dir" || rmdir "$extract_dir"
			fi
		else
			unzip "$1" -d "$extract_dir"
		fi
		;;
	'application/x-rar')
		if exists unrar; then
			unrar x -ad "$1"
		elif exists rar; then
			rar e -ad "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/x-bzip2')
		if exists bsdtar; then
			bsdtar_x "$1"
		else
			bunzip2 --keep "$1"
		fi
		;;
	'application/x-gzip')
		if exists bsdtar; then
			bsdtar_x "$1"
		else
			gunzip --keep "$1"
		fi
		;;
	'application/x-lrzip')
		if exists bsdtar; then
			bsdtar_x "$1"
		else
			# lrunzip keeps input by default
			lrunzip "$1"
		fi
		;;
	'application/x-lzip')
		if exists bsdtar; then
			bsdtar_x "$1"
		else
			lzip --decompress --keep "$1"
		fi
		;;
	'application/x-lzma')
		if exists bsdtar; then
			bsdtar_x "$1"
		else
			unlzma --keep "$1"
		fi
		;;
	'application/x-xz')
		if exists bsdtar; then
			bsdtar_x "$1"
		else
			unxz --keep "$1"
		fi
		;;
	*)
		errf "no handler for '%s' (%s), trying bsdtar\n" "$1" "$type"
		bsdtar_x "$1"
		;;
	esac
}

unarchive() {
	local type
	type="$(file -E -bzL --mime-type "$1")"
	if (($?)); then
		err "$type"
		return 1
	fi
	case "$type" in
	'application/x-tar')
		untar "$1"
		;;
	*)
		extract "$1"
		;;
	esac
}

while (($#)); do
	case "$1" in
	-h)
		usage
		exit
		;;
	-c)
		clobber=1
		shift
		;;
	-d)
		if [[ -z "$2" ]]; then
			err 'argument required for -d'
			usage
			exit 1
		fi
		out_dir="$2"
		shift 2
		;;
	-c)
		create_dir=1
		shift
		;;
	*)
		archives+=("$1")
		shift
		;;
	esac
done

exit_status=0

if [[ -n "$out_dir" ]]; then
	if ((create_dir)); then mkdir -p "$out_dir"; fi
	if [[ ! -d "$out_dir" ]]; then
		errf "output directory doesn't exist: %s\n" "$out_dir"
	fi
	prefix="$PWD/"
	cd "$out_dir"
fi

for archive in "${archives[@]}"; do
	file_name="$(basename "$archive")"
	extract_dir="${file_name%.*}"
	if ! unarchive "$prefix$archive"; then
		exit_status=1
	fi
done

exit "$exit_status"
