#!/bin/sh

set -e

prog="$(basename "$0")"
clobber=0
create_dir=0
out_dir=""
prefix=""

usage() {
	cat 1>&2 <<EOF
Usage: $prog [options] ['--'] files
Extracts the content of archives.

To extract in parallel, use the gnu parallel utility or xargs.

Options:
  -h    Show this help
  -f    Don't try to avoid clobbering files
  -d    Output directory
  -c    Create output directory
EOF
}

exists() { command -v foo >/dev/null 2>&1; }
err() { printf '%s: %s\n' "$prog" "$1" 1>&2; }
errf() { fmt="$1"; shift; printf "%s: $fmt\n" "$prog" "$@" 1>&2; }

if exists bsdtar; then
	tar=bsdtar
else
	tar=tar
fi

bsdtar_x() { bsdtar "-x${k}vf" "$@"; }
tar_x() { "$tar" "-x${k}vf" "$@"; }

untar() {
	type_tar="$(file -E -bL --mime-type "$1")"
	if [ "$?" != 0 ]; then
		err "$type_tar"
		return 1
	fi
	k=k
	if [ "$clobber" != 0 ]; then
		k=''
	fi
	case "$type_tar" in
	'application/x-tar'|'application/x-bzip2'|'application/x-gzip')
		tar_x "$1" ;;
	'application/x-lrzip')
		if "$tar" --lrzip --help >/dev/null 2>&1; then
			bsdtar_x "$1"
		else
			lrzcat "$1" | tar_x -
		fi
		;;
	'application/x-lzip')
		lzip --keep --decompress --stdout "$1" | tar_x - ;;
	'application/x-lzma')
		if "$tar" --lzma --help >/dev/null 2>&1; then
			tar_x "$1"
		else
			lzcat "$1" | tar_x -
		fi
		;;
	'application/x-xz')
		if "$tar" --xz --help >/dev/null 2>&1; then
			tar_x "$1"
		else
			xzcat "$1" | tar_x -
		fi
		;;
	'application/x-lz4')
		lz4cat "$1" | tar_x -
		;;
	*)
		# last resort
		bsdtar_x "$1" ;;
	esac
}

extract() {
	type_ex="$(file -E -bL --mime-type "$1")"
	if [ $? != 0 ]; then
		err "$type_ex"
		return 1
	fi
	case "$type_ex" in
	'application/x-7z-compressed')
		if exists 7za; then
			7za x "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/java-archive'|'application/zip')
		if exists bsdtar; then
			if mkdir "$extract_dir"; then
				bsdtar_x "$1" -C "$extract_dir" || rmdir "$extract_dir"
			fi
		else
			unzip "$1" -d "$extract_dir"
		fi
		;;
	'application/x-rar')
		if exists unrar; then
			unrar x -ad "$1"
		elif exists rar; then
			rar e -ad "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/x-bzip2')
		if exists bunzip2; then
			bunzip2 --keep "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/x-gzip')
		if exists gunzip; then
			gunzip --keep "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/x-lrzip')
		if exists lrunzip; then
			# lrunzip keeps input by default
			lrunzip "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/x-lzip')
		if exists lzip; then
			lzip --decompress --keep "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/x-lzma')
		if exists unlzma; then
			unlzma --keep "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/x-xz')
		if exists unxz; then
			unxz --keep "$1"
		else
			bsdtar_x "$1"
		fi
		;;
	'application/x-lz4')
		lz4 -d "$1"
		;;
	*)
		errf "no handler for '%s' (%s), trying bsdtar" "$1" "$type_ex"
		bsdtar_x "$1"
		;;
	esac
}

unarchive() {
	type_un="$(file -E -bzL --mime-type "$1")"
	if [ $? != 0 ]; then
		err "$type_un"
		return 1
	fi
	case "$type_un" in
	'application/x-tar')
		untar "$1"
		;;
	*)
		extract "$1"
		;;
	esac
}

while :; do
	case "$1" in
	'') break ;;
	--) shift; break ;;
	-h) usage; exit ;;
	-f) clobber=1; shift ;;
	-c) create_dir=1; shift ;;
	-d) if [ -z "$2" ]; then err 'argument required for -d'; usage exit 1; fi
	    out_dir="$2"; shift 2 ;;
	-?*) printf '%s: invalid option: %s\n' "$(basename "$0")" "$1" 1>&2; exit 1 ;;
	*) break ;;
	esac
done

if [ -n "$out_dir" ]; then
	if [ "$create_dir" != 0 ]; then mkdir -p "$out_dir"; fi
	if [ ! -d "$out_dir" ]; then
		errf "output directory doesn't exist: %s" "$out_dir"
	fi
	prefix="$PWD/"
	cd "$out_dir"
fi

exit_status=0

for archive in "$@"; do
	file_name="$(basename "$archive")"
	extract_dir="${file_name%.*}"
	if ! unarchive "$prefix$archive"; then
		exit_status=1
	fi
done

exit "$exit_status"
